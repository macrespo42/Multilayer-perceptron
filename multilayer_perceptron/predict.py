"""Prediction program using model generated by train program."""

import argparse
import pickle

import pandas as pd
from data_engineering import data_preparation
from model.metrics import accuracy_score, binary_cross_entropy


def load_model(path):
    """Load a model from config file."""
    with open(path, "rb") as config:
        model = pickle.load(config)
    return model


def predict():
    """Predict."""
    parser = argparse.ArgumentParser()
    parser.add_argument("model_path", help="path of the model", type=str)
    parser.add_argument("data_predict", help="path to the test dataset", type=str)
    args = parser.parse_args()

    model = None
    try:
        model = load_model(args.model_path)
    except Exception as e:
        print(f"Error: {e}")
        exit(1)

    breast_cancer_data_test = None
    try:
        breast_cancer_data_test = pd.read_csv(args.data_predict)
    except Exception:
        print("Can't find dataset")
        exit(1)

    feature_names = [
        "radius_mean",
        "texture_mean",
        "perimeter_mean",
        "area_mean",
        "smoothness_mean",
        "compactness_mean",
        "concavity_mean",
        "concave points_mean",
        "radius_se",
        "texture_se",
        "perimeter_se",
        "area_se",
        "smoothness_se",
        "compactness_se",
        "concavity_se",
        "concave points_se",
        "radius_worst",
        "texture_worst",
        "perimeter_worst",
        "area_worst",
        "smoothness_worst",
        "compactness_worst",
        "concavity_worst",
        "concave points_worst",
    ]

    X_test, y_test = (breast_cancer_data_test[feature_names], breast_cancer_data_test["diagnosis"])

    X_test = data_preparation.normalize(X_test)
    y_test = data_preparation.encode_categorical_variables(y_test, "B", "M")

    y_pred = model.predict(X_test)
    print(f"ACCURRACY: { accuracy_score(y_test.argmax(axis=1), y_pred.argmax(axis=1)) }")
    print(f"MY LOSS: {binary_cross_entropy(y_test.argmax(axis=1), y_pred[:, 1])}")


if __name__ == "__main__":
    predict()
